// EE3980 HW01 Quadratic Sorts
// 107061240,
// 2020/03/13

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/time.h>
#include <stdbool.h>

int N;                                        // input size
char **data;                                  // input data
char **A;                                     // array to be sorted
int R = 500;                                        // number of repetitions


void read_input(void);                        // read all inputs
void print_array(char **A);                   // print the content of array A
void copy_array(char **data, char **A);       // copy data to array A
double get_time(void);                        // get local time in seconds
void selection_sort(char **list, int n);      // doing selection sort
//void insertion_sort(char **list, int n);      // doing insertion sort
//void bubble_sort(char **list, int n);         // doing bubble sort
//void oddeven_sort(char **list, int n);        // doing shaker sort              // doing swap


void read_input(void)
{
    int i, len;
    char str[100];
    scanf("%d", &N);
    data = (char **)malloc(N * sizeof(char *));

    for (i = 0; i < N; i++) {
        scanf("%s", str);
        //len = strlen(str) + 1;
        data[i] = (char *)malloc(20 * sizeof(char));
        strcpy(data[i], str);
    }
}
void print_array(char **A)
{
    int i;                                 // a variable for index

    for (i = 1; i <= N; i++) {
        printf ("%d\n", i);
    }
}

void copy_array(char **data, char **A)
{
    int i;
    A = (char **)malloc(N * sizeof(char *));
    for (i = 0; i < N; i++) {
        A[i] = (char *)malloc(20 * sizeof(char));
        printf("%d\n", 222);
        strcpy(A[i], data[i]);

    }
}

double get_time(void)
{
    struct timeval tv;

    gettimeofday(&tv, NULL);
    return tv.tv_sec + 1e-6 * tv.tv_usec;
}

void selection_sort(char **list, int n)
{
    int i, j, min_idx;

    for (i = 0; i < n - 1; i++)  {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (strcmp(list[min_idx], list[j]) > 0) {
                min_idx = j;
            }
        }
        if (min_idx != i) {
            char temp[100];
            strcmp(temp, list[i]);
            strcmp(list[i], list[j]);
            strcmp(list[j], list[i]);
        }
    }
}
/*void insertion_sort(char **list, int n)
{
    int i, j;
    char str[100];

    for (i = 1; i < n; i++) {
        strcpy(str, list[i]);
        j = i - 1;
        while ((strcmp(str, list[j])) && (j >=0)) {
            strcpy(list[j + 1], list[j]);
            j--;
       }
      strcpy(list[j + 1], str);
    }
}
void bubble_sort(char **list, int n)
{
    int i, j;

    for (i = 0; i < n - 1; i++) {
       for (j = n - 1; j > i; j--) {
           if (strcmp(list[j], list[j - 1]) < 0) {
              swap(list, j, j - 1);
           }
       }
    }
}
void oddeven_sort(char **list, int n)
{
    bool done = false;
    int i, j;

    while (!done) {
        done = true;
        for (i = 1; i < n - 1; i = 1 + 2) {
            if (strcmp(list[i], list[i + 1]) > 0) {
                swap(list, i, i + 1);
                done = false;
            }
        }

        for (i = 0; i < n - 1; i = i + 2) {
            if (strcmp(list[i], list[i + 1]) > 0) {
                swap(list, i, i + 1);
                done = false;
            }
        }
    }
}
*/

int main(void)
{
    int i;
    double t;

    read_input();
    t = get_time();

    for (i = 0; i < R; i++) {
        printf("%d\n", 111);
        copy_array(data, A);
        printf("%d\n", 333);
        selection_sort(A, N);
    }
    t = (get_time() - t) / R;
    printf("Selection sort: N = 10 CPU = %f seconds\n", t);

    /*for (i = 0; i < R; i++) {
        copy_array(data, A);
        insertion_sort(A, N);
    }
    t = (get_time() - t) / R;
    printf("Insertion sort: N = 10 CPU = %f seconds\n", t);

    for (i = 0; i < R; i++) {
        copy_array(data, A);
        bubble_sort(A, N);
    }
    t = (get_time() - t) / R;
    printf("Bubble sort: N = 10 CPU = %f seconds\n", t);

    for (i = 0; i < R; i++) {
        copy_array(data, A);
        oddeven_sort(A, N);
    }
    t = (get_time() - t) / R;
    printf("OddEven sort: N = 10 CPU = %f seconds\n", t);

*/
    print_array(A);

    return 0;
}
